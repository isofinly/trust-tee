name: Valgrind (memcheck + cachegrind)

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  valgrind:
    name: Run benchmarks under Valgrind
    runs-on: ubuntu-24.04
    timeout-minutes: 60

    env:
      BENCH_NAMES: "perf_local perf_pinned_remote perf_latch"
      ITER: "100000"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install valgrind
        run: |
          sudo apt update
          sudo apt install valgrind

      - name: Run tests normally and capture output
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p test-results
          if cargo test --workspace --all-features --profile profiling -- --quiet --nocapture | tee test-results/tests-output.txt; then
            echo ok > test-results/status
          else
            echo failed > test-results/status
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/

      - name: Build benches (profiling)
        shell: bash
        run: |
          cargo bench --no-run --all-features --profile profiling

      - name: Run memcheck
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p valgrind-memcheck
          for name in $BENCH_NAMES; do
            # Cargo bench binaries end up as target/profiling/deps/<name>-*
            path=$(ls target/profiling/deps/${name}-* 2>/dev/null | head -n1 || true)
            if [[ -z "$path" ]]; then
              echo "Could not find built bench binary for $name under target/profiling/deps" >&2
              exit 1
            fi
            if [[ ! -x "$path" ]]; then
              echo "Resolved path is not executable for $name: $path" >&2
              exit 1
            fi
            bin=$(basename "$path")
            log="valgrind-memcheck/${bin}.memcheck.log"
            echo "==> memcheck: $bin"
            ITER=${ITER} CG_ITER=${ITER} valgrind \
              --tool=memcheck \
              --leak-check=full \
              --show-leak-kinds=all \
              --track-origins=yes \
              --errors-for-leak-kinds=definite,possible \
              --exit-on-first-error=no \
              --error-exitcode=99 \
              --trace-children=yes \
              --child-silent-after-fork=yes \
              --log-file="$log" \
              "$path" >/dev/null 2>&1 || rc=$?
            if [ "${rc:-0}" -ne 0 ]; then
              echo "memcheck failed for $bin with code ${rc:-0}; see $log" >&2
              exit "$rc"
            fi
          done

      - name: Run cachegrind and annotate
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p cachegrind-raw cachegrind-annotated
          for name in $BENCH_NAMES; do
            path=$(ls target/profiling/deps/${name}-* 2>/dev/null | head -n1 || true)
            if [[ -z "$path" ]]; then
              echo "Could not find built bench binary for $name under target/profiling/deps" >&2
              exit 1
            fi
            if [[ ! -x "$path" ]]; then
              echo "Resolved path is not executable for $name: $path" >&2
              exit 1
            fi
            bin=$(basename "$path")
            raw_out="cachegrind-raw/cachegrind-${bin}.out"
            ann_out="cachegrind-annotated/cachegrind-${bin}.annotated.txt"
            log="cachegrind-raw/cachegrind-${bin}.log"
            echo "==> cachegrind+cg_annotate: $bin"
            ITER=${ITER} CG_ITER=${ITER} valgrind \
              --tool=cachegrind \
              --trace-children=yes \
              --child-silent-after-fork=yes \
              --log-file="$log" \
              --cachegrind-out-file="$raw_out" \
              "$path" >/dev/null 2>&1 || true
            if command -v cg_annotate >/dev/null 2>&1; then
              cg_annotate "$raw_out" > "$ann_out" || true
            else
              echo "cg_annotate missing" > "$ann_out"
            fi
          done

      - name: Upload memcheck logs
        uses: actions/upload-artifact@v4
        with:
          name: valgrind-memcheck-logs
          path: valgrind-memcheck/

      - name: Upload cachegrind annotated outputs
        uses: actions/upload-artifact@v4
        with:
          name: cachegrind-annotated
          path: cachegrind-annotated/

      - name: Upload cachegrind valgrind logs
        uses: actions/upload-artifact@v4
        with:
          name: valgrind-cachegrind-logs
          path: cachegrind-raw/
